{"version":3,"sources":["src/index.js"],"names":["nameArr"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAMA,OAAO,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC;;AAEnC;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"src.a2b27638.js","sourceRoot":"..","sourcesContent":["/**\n *  const, let 等の変数宣言\n */\n// var val1 = \"var変数\";\n// console.log(val1);\n\n// // var変数は上書き・再宣言が可能\n// var val1 = \"var変数を上書き\";\n// console.log(val1);\n\n// let val2 = \"let変数\";\n// console.log(val2);\n\n// letは上書きが可能\n\n// constで定義したオブジェクトはプロパティの変更が可能\n// const val4 = {\n//   name: \"じゃけえ\",\n//   age: 28,\n// };\n// val4.name = \"kou\";\n// val4.adress = \"Saitama\";\n// console.log(val4);\n\n// constで定義した配列はプロパティの変更が可能\n// const val5 = [\"dog\", \"cat\"];\n// val5[0] = \"bird\";\n// val5.push(\"monkey\");\n// console.log(val5);\n\n/**\n * テンプレート文字列\n */\n// const name = \"じゃけえ\";\n// const age = 32;\n// console.log(`私の名前は${name}です。年齢は${age}歳です`);\n\n/**\n * アロー関数\n */\n// function func1(str) {\n//   return str;\n// }\n// const func1 = function (str) {\n//   return str;\n// };\n// console.log(func1(\"func1です\"));\n\n// // アロー関数\n// const func2 = (str2) => str2;\n// console.log(func2(\"func2です\"));\n\n// const func3 = (num1, num2) => num1 + num2;\n\n// console.log(func3(10, 20));\n\n/**\n * 分割代入\n */\n// const myProfile = {\n//   name: \"Kou\",\n//   age: 32,\n// };\n\n// const message1 = `名前は${myProfile.name}で、年齢は${myProfile.age}歳です`;\n// console.log(message1);\n\n// const { name, age } = myProfile;\n// const message2 = `名前は${name}で、年齢は${age}歳です`;\n// console.log(message2);\n\n// const myProfile = [\"Kou\", 32];\n// const message3 = `名前は${myProfile[0]}で、年齢は${myProfile[1]}歳です`;\n// console.log(message3);\n\n// const [name, age] = myProfile;\n// const message4 = `名前は${name}で、年齢は${age}歳です`;\n// console.log(message4);\n\n/**\n * デフォルト値\n */\n// const sayHello = (name = \"ゲスト\") => console.log(`こんにちは${name}さん`);\n// sayHello();\n\n/**\n * スプレッド構文\n */\n// 配列の展開\n// const arr1 = [1, 2];\n// console.log(arr1);\n// console.log(...arr1);\n\n// const sumFunc = (num1, num2) => console.log(num1 + num2);\n// sumFunc(arr1[0], arr1[1]);\n// sumFunc(...arr1);\n\n// まとめる\n// const arr2 = [1, 2, 3, 4, 5];\n// const [num1, num2, ...arr3] = arr2;\n// console.log(num1);\n// console.log(num2);\n// console.log(arr3);\n\n// 配列のコピー、結合\n// const arr4 = [10, 20];\n// const arr5 = [30, 40];\n\n// const arr6 = [...arr4];\n// console.log(arr6);\n\n// const arr7 = [...arr4, ...arr5];\n// console.log(arr7);\n\n// const arr8 = [...arr4];\n// arr8[0] = 100;\n// console.log(arr8);\n// console.log(arr4);\n\n/**\n * mapやfilterを使った配列の処理\n */\nconst nameArr = [\"田中\", \"山田\", \"Kou\"];\n\n// const nameArr2 = nameArr.map((name) => {\n//   return name;\n// });\n\n// console.log(nameArr2);\n\n// nameArr.map((name, index) => console.log(`${index + 1}: ${name}`));\n\n// const numArr = [1, 2, 3, 4, 5];\n// const newNumArr = numArr.filter((num) => {\n//   return num % 2 === 1;\n// });\n// // console.log(newNumArr);\n\n// const newNameArr = nameArr.map((name) => {\n//   if (name === \"Kou\") {\n//     return name;\n//   } else {\n//     return `${name}さん`;\n//   }\n// });\n// console.log(newNameArr);\n\n/**\n * 三項演算子\n */\n// ある条件 ? 条件がtrueの時 : 条件がfalseの時\n// const val1 = 1 < 0 ? \"trueです\" : \"falseです\";\n// console.log(val1);\n\n// const num = 1300;\n// console.log(num.toLocaleString());\n\n// const formattedNum =\n//   typeof num === \"number\" ? num.toLocaleString() : \"数値を入力してください\";\n// console.log(formattedNum);\n\n// const checkSum = (num1, num2) => {\n//   return num1 + num2 > 100 ? \"100をこえています！\" : \"許容範囲内です\";\n// };\n// console.log(checkSum(50, 30));\n\n/**\n * 論理演算子の本当の意味を知ろう && ||\n */\n\n// const flag1 = true;\n// const flag2 = false;\n\n// if (flag1 || flag2) {\n//     console.log('1か2はtrueになります');\n// }\n\n// if (flag1 && flag2) {\n//     console.log('1も2もtrueになります');\n// }\n\n// || は左側がfalseなら右側を返す\n// const num = 100;\n// const fee = num || \"金額未設定です\";\n// console.log(fee);\n\n// const num2 = 100;\n// const fee2 = num2 && \"何か設定されました\";\n// console.log(fee2);\n\n \n"]}